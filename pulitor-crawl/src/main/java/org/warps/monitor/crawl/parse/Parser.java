/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.warps.monitor.crawl.parse;

// Hadoop imports

import org.warps.monitor.crawl.protocol.Protocol;
import org.warps.pulsar.common.ReloadableParameterized;
import org.warps.pulsar.persist.WebPage;
import org.xml.sax.InputSource;

import java.io.ByteArrayInputStream;
import java.nio.ByteBuffer;

/**
 * A parser for content generated by a
 * {@link Protocol} implementation. This interface is
 * implemented by extensions. PulsarConstants's core contains no page parsing code.
 */
public interface Parser extends ReloadableParameterized {
  /**
   * <p>
   * This method parses content in WebPage instance
   * </p>
   * 
   * @param url
   *          Page's URL
   * @param page
   */
  ParseResult parse(String url, WebPage page);
  
  static InputSource getContentAsInputSource(WebPage page) {
    ByteBuffer contentInOctets = page.getContent();

    ByteArrayInputStream stream = new ByteArrayInputStream(contentInOctets.array(),
        contentInOctets.arrayOffset() + contentInOctets.position(),
        contentInOctets.remaining());

    return new InputSource(stream);
  }

  static InputSource getContentAsInputSource(WebPage page, String encoding) {
    InputSource input = getContentAsInputSource(page);
    input.setEncoding(encoding);
    return input;
  }
}
